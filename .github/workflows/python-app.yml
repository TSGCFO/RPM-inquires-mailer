name: CI
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      
      - name: Lint with flake8 (if available)
        run: |
          # Stop on syntax errors or undefined names
          python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        continue-on-error: true
      
      - name: Test code syntax
        run: |
          python -m py_compile listener.py
          
      - name: Run tests
        run: |
          PYTHONPATH=. pytest tests/test_listener.py -v --tb=short
      
      - name: Test multi-instance configuration loading
        run: |
          # Test that the module can be imported and basic functions work
          PYTHONPATH=. python -c "
          import os
          import listener
          
          # Test single instance config (should work with minimal env vars)
          os.environ.update({
              'PGHOST': 'test_host',
              'PGDATABASE': 'test_db', 
              'PGUSER': 'test_user',
              'PGPASSWORD': 'test_pass',
              'TENANT_ID': 'test_tenant',
              'CLIENT_ID': 'test_client',
              'CLIENT_SECRET': 'test_secret',
              'FROM_EMAIL': 'test@example.com',
              'TO_EMAIL': 'recipient@example.com'
          })
          
          configs = listener.load_instance_configs()
          assert len(configs) == 1
          assert configs[0].instance_name == 'Instance-1'
          print('✅ Single instance configuration test passed')
          
          # Test dual instance config
          os.environ.update({
              'PGHOST_2': 'test_host_2',
              'PGDATABASE_2': 'test_db_2',
              'PGUSER_2': 'test_user_2', 
              'PGPASSWORD_2': 'test_pass_2',
              'TENANT_ID_2': 'test_tenant_2',
              'CLIENT_ID_2': 'test_client_2',
              'CLIENT_SECRET_2': 'test_secret_2',
              'FROM_EMAIL_2': 'test2@example.com',
              'TO_EMAIL_2': 'recipient2@example.com'
          })
          
          configs = listener.load_instance_configs()
          assert len(configs) == 2
          assert configs[0].instance_name == 'Instance-1'
          assert configs[1].instance_name == 'Instance-2'
          print('✅ Dual instance configuration test passed')
          "
          
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run security scan
        run: |
          # Check for secrets in code (basic check)
          if grep -r "password\|secret\|key" --include="*.py" . | grep -v "# " | grep -v "test" | grep -v "example" || true; then
            echo "⚠️  Found potential hardcoded secrets - please review"
          else
            echo "✅ No obvious hardcoded secrets found"
          fi
